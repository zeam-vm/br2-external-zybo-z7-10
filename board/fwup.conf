# Default ROOTFS if not specified
define(ROOTFS, "${PROJECT_ROOT}/output/images/rootfs.ext2")

# Image layout
# +------------------------+
# | MBR                    |
# +------------------------+
# | Boot partition (FAT32) |
# | BOOT.BIN               |
# | boot.scr               |
# | zImage                 |
# | system.dtb             |
# +------------------------+
# | Rootfs (EXT4)          |
# +------------------------+

# The boot partition has room for booting resources. (about 10 MB)
define(BOOT_PART_OFFSET, 1)
define(BOOT_PART_COUNT, 20480) # 20480 * 512 / 1024 / 1024 = 10 MiB

# Let the rootfs have room to grow up to 128 MiB (256K 512-byte blocks)
define(ROOTFS_PART_OFFSET, 20481)
define(ROOTFS_PART_COUNT, 262144) # 262144 * 512 / 1024 / 1024 = 128 MiB

# Firmware metadata
meta-product = "Image for the Zybo Z7-10"
meta-description = "This image boots to Linux."
meta-version = "0.1"
meta-platform = "zybo_z7_10"
meta-architecture = "arm"
meta-author = "Tombo Works"

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource BOOT.BIN {
    host-path = "${PROJECT_ROOT}/output/images/BOOT.BIN"
}
file-resource boot.scr {
    host-path = "${PROJECT_ROOT}/output/images/boot.scr"
}
file-resource zImage {
    host-path = "${PROJECT_ROOT}/output/images/zImage"
}
file-resource system.dtb {
    host-path = "${BR2_EXTERNAL_ZYBO_Z7_10_PATH}/board/system.dtb"
}
file-resource rootfs.ext2 {
    host-path = ${ROOTFS}
}

mbr mbr-a {
    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0x0C # FAT32
    }
    partition 1 {
        block-offset = ${ROOTFS_PART_OFFSET}
        block-count = ${ROOTFS_PART_COUNT}
        type = 0x83 # Linux
    }
}

# This firmware task writes everything to the destination media
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    # Everything that gets written can be verified on the fly.
    # This speeds things up, since we don't care about detecting
    # errors before data gets written.
    verify-on-the-fly = true

    on-init {
        mbr_write(mbr-a)
        fat_mkfs(${BOOT_PART_OFFSET}, ${BOOT_PART_COUNT})
    }

    on-resource BOOT.BIN { fat_write(${BOOT_PART_OFFSET}, "BOOT.BIN") }
    on-resource boot.scr { fat_write(${BOOT_PART_OFFSET}, "boot.scr") }
    on-resource zImage { fat_write(${BOOT_PART_OFFSET}, "zImage") }
    on-resource system.dtb { fat_write(${BOOT_PART_OFFSET}, "system.dtb") }

    on-resource rootfs.ext2 {
        # write to the first rootfs partition
        raw_write(${ROOTFS_PART_OFFSET})
    }

    on-finish {
    }
}
